// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DigitalLife.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DigitalLife_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DigitalLife_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DigitalLife_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DigitalLife_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DigitalLife_2eproto;
namespace DigitalLifeNameSpace {
class C_BaseAsk;
class C_BaseAskDefaultTypeInternal;
extern C_BaseAskDefaultTypeInternal _C_BaseAsk_default_instance_;
class C_SendData;
class C_SendDataDefaultTypeInternal;
extern C_SendDataDefaultTypeInternal _C_SendData_default_instance_;
class S_AllowedSay;
class S_AllowedSayDefaultTypeInternal;
extern S_AllowedSayDefaultTypeInternal _S_AllowedSay_default_instance_;
class S_RetData;
class S_RetDataDefaultTypeInternal;
extern S_RetDataDefaultTypeInternal _S_RetData_default_instance_;
class S_SwitchMesh;
class S_SwitchMeshDefaultTypeInternal;
extern S_SwitchMeshDefaultTypeInternal _S_SwitchMesh_default_instance_;
}  // namespace DigitalLifeNameSpace
PROTOBUF_NAMESPACE_OPEN
template<> ::DigitalLifeNameSpace::C_BaseAsk* Arena::CreateMaybeMessage<::DigitalLifeNameSpace::C_BaseAsk>(Arena*);
template<> ::DigitalLifeNameSpace::C_SendData* Arena::CreateMaybeMessage<::DigitalLifeNameSpace::C_SendData>(Arena*);
template<> ::DigitalLifeNameSpace::S_AllowedSay* Arena::CreateMaybeMessage<::DigitalLifeNameSpace::S_AllowedSay>(Arena*);
template<> ::DigitalLifeNameSpace::S_RetData* Arena::CreateMaybeMessage<::DigitalLifeNameSpace::S_RetData>(Arena*);
template<> ::DigitalLifeNameSpace::S_SwitchMesh* Arena::CreateMaybeMessage<::DigitalLifeNameSpace::S_SwitchMesh>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DigitalLifeNameSpace {

enum S_SwitchMesh_ClientMeshType : int {
  S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_PAIMON = 0,
  S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_YUNFEI = 1,
  S_SwitchMesh_ClientMeshType_S_SwitchMesh_ClientMeshType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  S_SwitchMesh_ClientMeshType_S_SwitchMesh_ClientMeshType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool S_SwitchMesh_ClientMeshType_IsValid(int value);
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh_ClientMeshType_ClientMeshType_MIN = S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_PAIMON;
constexpr S_SwitchMesh_ClientMeshType S_SwitchMesh_ClientMeshType_ClientMeshType_MAX = S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_YUNFEI;
constexpr int S_SwitchMesh_ClientMeshType_ClientMeshType_ARRAYSIZE = S_SwitchMesh_ClientMeshType_ClientMeshType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* S_SwitchMesh_ClientMeshType_descriptor();
template<typename T>
inline const std::string& S_SwitchMesh_ClientMeshType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, S_SwitchMesh_ClientMeshType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function S_SwitchMesh_ClientMeshType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    S_SwitchMesh_ClientMeshType_descriptor(), enum_t_value);
}
inline bool S_SwitchMesh_ClientMeshType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, S_SwitchMesh_ClientMeshType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<S_SwitchMesh_ClientMeshType>(
    S_SwitchMesh_ClientMeshType_descriptor(), name, value);
}
enum BaseMessageType : int {
  BASEMESSAGETYPE_None = 0,
  BASEMESSAGETYPE_SWITCHMESH = 1,
  BASEMESSAGETYPE_ALLOWEDSAY = 2,
  BASEMESSAGETYPE_CLIENTSENDDATA = 3,
  BASEMESSAGETYPE_SERVERRETDATA = 4,
  BaseMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BaseMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BaseMessageType_IsValid(int value);
constexpr BaseMessageType BaseMessageType_MIN = BASEMESSAGETYPE_None;
constexpr BaseMessageType BaseMessageType_MAX = BASEMESSAGETYPE_SERVERRETDATA;
constexpr int BaseMessageType_ARRAYSIZE = BaseMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BaseMessageType_descriptor();
template<typename T>
inline const std::string& BaseMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BaseMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BaseMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BaseMessageType_descriptor(), enum_t_value);
}
inline bool BaseMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BaseMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BaseMessageType>(
    BaseMessageType_descriptor(), name, value);
}
enum ClientMeshType : int {
  CLIENTMESHTYPE_PAIMON = 0,
  CLIENTMESHTYPE_YUNFEI = 1,
  ClientMeshType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ClientMeshType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ClientMeshType_IsValid(int value);
constexpr ClientMeshType ClientMeshType_MIN = CLIENTMESHTYPE_PAIMON;
constexpr ClientMeshType ClientMeshType_MAX = CLIENTMESHTYPE_YUNFEI;
constexpr int ClientMeshType_ARRAYSIZE = ClientMeshType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientMeshType_descriptor();
template<typename T>
inline const std::string& ClientMeshType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientMeshType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientMeshType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientMeshType_descriptor(), enum_t_value);
}
inline bool ClientMeshType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ClientMeshType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientMeshType>(
    ClientMeshType_descriptor(), name, value);
}
// ===================================================================

class C_BaseAsk PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalLifeNameSpace.C_BaseAsk) */ {
 public:
  inline C_BaseAsk() : C_BaseAsk(nullptr) {}
  virtual ~C_BaseAsk();

  C_BaseAsk(const C_BaseAsk& from);
  C_BaseAsk(C_BaseAsk&& from) noexcept
    : C_BaseAsk() {
    *this = ::std::move(from);
  }

  inline C_BaseAsk& operator=(const C_BaseAsk& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_BaseAsk& operator=(C_BaseAsk&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_BaseAsk& default_instance();

  static inline const C_BaseAsk* internal_default_instance() {
    return reinterpret_cast<const C_BaseAsk*>(
               &_C_BaseAsk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_BaseAsk& a, C_BaseAsk& b) {
    a.Swap(&b);
  }
  inline void Swap(C_BaseAsk* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_BaseAsk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_BaseAsk* New() const final {
    return CreateMaybeMessage<C_BaseAsk>(nullptr);
  }

  C_BaseAsk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_BaseAsk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_BaseAsk& from);
  void MergeFrom(const C_BaseAsk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_BaseAsk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalLifeNameSpace.C_BaseAsk";
  }
  protected:
  explicit C_BaseAsk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DigitalLife_2eproto);
    return ::descriptor_table_DigitalLife_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseTypeFieldNumber = 1,
    kBSuccessFieldNumber = 15,
  };
  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  void clear_basetype();
  ::DigitalLifeNameSpace::BaseMessageType basetype() const;
  void set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  private:
  ::DigitalLifeNameSpace::BaseMessageType _internal_basetype() const;
  void _internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  public:

  // bool bSuccess = 15;
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalLifeNameSpace.C_BaseAsk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int basetype_;
  bool bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalLife_2eproto;
};
// -------------------------------------------------------------------

class S_SwitchMesh PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalLifeNameSpace.S_SwitchMesh) */ {
 public:
  inline S_SwitchMesh() : S_SwitchMesh(nullptr) {}
  virtual ~S_SwitchMesh();

  S_SwitchMesh(const S_SwitchMesh& from);
  S_SwitchMesh(S_SwitchMesh&& from) noexcept
    : S_SwitchMesh() {
    *this = ::std::move(from);
  }

  inline S_SwitchMesh& operator=(const S_SwitchMesh& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SwitchMesh& operator=(S_SwitchMesh&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_SwitchMesh& default_instance();

  static inline const S_SwitchMesh* internal_default_instance() {
    return reinterpret_cast<const S_SwitchMesh*>(
               &_S_SwitchMesh_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_SwitchMesh& a, S_SwitchMesh& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SwitchMesh* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SwitchMesh* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_SwitchMesh* New() const final {
    return CreateMaybeMessage<S_SwitchMesh>(nullptr);
  }

  S_SwitchMesh* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_SwitchMesh>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_SwitchMesh& from);
  void MergeFrom(const S_SwitchMesh& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SwitchMesh* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalLifeNameSpace.S_SwitchMesh";
  }
  protected:
  explicit S_SwitchMesh(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DigitalLife_2eproto);
    return ::descriptor_table_DigitalLife_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef S_SwitchMesh_ClientMeshType ClientMeshType;
  static constexpr ClientMeshType CLIENTMESHTYPE_PAIMON =
    S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_PAIMON;
  static constexpr ClientMeshType CLIENTMESHTYPE_YUNFEI =
    S_SwitchMesh_ClientMeshType_CLIENTMESHTYPE_YUNFEI;
  static inline bool ClientMeshType_IsValid(int value) {
    return S_SwitchMesh_ClientMeshType_IsValid(value);
  }
  static constexpr ClientMeshType ClientMeshType_MIN =
    S_SwitchMesh_ClientMeshType_ClientMeshType_MIN;
  static constexpr ClientMeshType ClientMeshType_MAX =
    S_SwitchMesh_ClientMeshType_ClientMeshType_MAX;
  static constexpr int ClientMeshType_ARRAYSIZE =
    S_SwitchMesh_ClientMeshType_ClientMeshType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ClientMeshType_descriptor() {
    return S_SwitchMesh_ClientMeshType_descriptor();
  }
  template<typename T>
  static inline const std::string& ClientMeshType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ClientMeshType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ClientMeshType_Name.");
    return S_SwitchMesh_ClientMeshType_Name(enum_t_value);
  }
  static inline bool ClientMeshType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ClientMeshType* value) {
    return S_SwitchMesh_ClientMeshType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kBaseTypeFieldNumber = 1,
    kMeshTypeFieldNumber = 2,
    kBSuccessFieldNumber = 15,
  };
  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  void clear_basetype();
  ::DigitalLifeNameSpace::BaseMessageType basetype() const;
  void set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  private:
  ::DigitalLifeNameSpace::BaseMessageType _internal_basetype() const;
  void _internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  public:

  // .DigitalLifeNameSpace.S_SwitchMesh.ClientMeshType MeshType = 2;
  void clear_meshtype();
  ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType meshtype() const;
  void set_meshtype(::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType value);
  private:
  ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType _internal_meshtype() const;
  void _internal_set_meshtype(::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType value);
  public:

  // bool bSuccess = 15;
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalLifeNameSpace.S_SwitchMesh)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int basetype_;
  int meshtype_;
  bool bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalLife_2eproto;
};
// -------------------------------------------------------------------

class S_AllowedSay PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalLifeNameSpace.S_AllowedSay) */ {
 public:
  inline S_AllowedSay() : S_AllowedSay(nullptr) {}
  virtual ~S_AllowedSay();

  S_AllowedSay(const S_AllowedSay& from);
  S_AllowedSay(S_AllowedSay&& from) noexcept
    : S_AllowedSay() {
    *this = ::std::move(from);
  }

  inline S_AllowedSay& operator=(const S_AllowedSay& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_AllowedSay& operator=(S_AllowedSay&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_AllowedSay& default_instance();

  static inline const S_AllowedSay* internal_default_instance() {
    return reinterpret_cast<const S_AllowedSay*>(
               &_S_AllowedSay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(S_AllowedSay& a, S_AllowedSay& b) {
    a.Swap(&b);
  }
  inline void Swap(S_AllowedSay* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_AllowedSay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_AllowedSay* New() const final {
    return CreateMaybeMessage<S_AllowedSay>(nullptr);
  }

  S_AllowedSay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_AllowedSay>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_AllowedSay& from);
  void MergeFrom(const S_AllowedSay& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_AllowedSay* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalLifeNameSpace.S_AllowedSay";
  }
  protected:
  explicit S_AllowedSay(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DigitalLife_2eproto);
    return ::descriptor_table_DigitalLife_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseTypeFieldNumber = 1,
    kBSuccessFieldNumber = 15,
  };
  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  void clear_basetype();
  ::DigitalLifeNameSpace::BaseMessageType basetype() const;
  void set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  private:
  ::DigitalLifeNameSpace::BaseMessageType _internal_basetype() const;
  void _internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  public:

  // bool bSuccess = 15;
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalLifeNameSpace.S_AllowedSay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int basetype_;
  bool bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalLife_2eproto;
};
// -------------------------------------------------------------------

class C_SendData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalLifeNameSpace.C_SendData) */ {
 public:
  inline C_SendData() : C_SendData(nullptr) {}
  virtual ~C_SendData();

  C_SendData(const C_SendData& from);
  C_SendData(C_SendData&& from) noexcept
    : C_SendData() {
    *this = ::std::move(from);
  }

  inline C_SendData& operator=(const C_SendData& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_SendData& operator=(C_SendData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const C_SendData& default_instance();

  static inline const C_SendData* internal_default_instance() {
    return reinterpret_cast<const C_SendData*>(
               &_C_SendData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(C_SendData& a, C_SendData& b) {
    a.Swap(&b);
  }
  inline void Swap(C_SendData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_SendData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline C_SendData* New() const final {
    return CreateMaybeMessage<C_SendData>(nullptr);
  }

  C_SendData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<C_SendData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const C_SendData& from);
  void MergeFrom(const C_SendData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_SendData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalLifeNameSpace.C_SendData";
  }
  protected:
  explicit C_SendData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DigitalLife_2eproto);
    return ::descriptor_table_DigitalLife_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWavFileDataFieldNumber = 2,
    kBaseTypeFieldNumber = 1,
    kBSuccessFieldNumber = 15,
  };
  // bytes WavFileData = 2;
  void clear_wavfiledata();
  const std::string& wavfiledata() const;
  void set_wavfiledata(const std::string& value);
  void set_wavfiledata(std::string&& value);
  void set_wavfiledata(const char* value);
  void set_wavfiledata(const void* value, size_t size);
  std::string* mutable_wavfiledata();
  std::string* release_wavfiledata();
  void set_allocated_wavfiledata(std::string* wavfiledata);
  private:
  const std::string& _internal_wavfiledata() const;
  void _internal_set_wavfiledata(const std::string& value);
  std::string* _internal_mutable_wavfiledata();
  public:

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  void clear_basetype();
  ::DigitalLifeNameSpace::BaseMessageType basetype() const;
  void set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  private:
  ::DigitalLifeNameSpace::BaseMessageType _internal_basetype() const;
  void _internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  public:

  // bool bSuccess = 15;
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalLifeNameSpace.C_SendData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wavfiledata_;
  int basetype_;
  bool bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalLife_2eproto;
};
// -------------------------------------------------------------------

class S_RetData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitalLifeNameSpace.S_RetData) */ {
 public:
  inline S_RetData() : S_RetData(nullptr) {}
  virtual ~S_RetData();

  S_RetData(const S_RetData& from);
  S_RetData(S_RetData&& from) noexcept
    : S_RetData() {
    *this = ::std::move(from);
  }

  inline S_RetData& operator=(const S_RetData& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_RetData& operator=(S_RetData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const S_RetData& default_instance();

  static inline const S_RetData* internal_default_instance() {
    return reinterpret_cast<const S_RetData*>(
               &_S_RetData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(S_RetData& a, S_RetData& b) {
    a.Swap(&b);
  }
  inline void Swap(S_RetData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_RetData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline S_RetData* New() const final {
    return CreateMaybeMessage<S_RetData>(nullptr);
  }

  S_RetData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<S_RetData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const S_RetData& from);
  void MergeFrom(const S_RetData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_RetData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitalLifeNameSpace.S_RetData";
  }
  protected:
  explicit S_RetData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_DigitalLife_2eproto);
    return ::descriptor_table_DigitalLife_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWavFileDataFieldNumber = 3,
    kBaseTypeFieldNumber = 1,
    kStateTypeFieldNumber = 2,
    kBSuccessFieldNumber = 15,
  };
  // bytes WavFileData = 3;
  void clear_wavfiledata();
  const std::string& wavfiledata() const;
  void set_wavfiledata(const std::string& value);
  void set_wavfiledata(std::string&& value);
  void set_wavfiledata(const char* value);
  void set_wavfiledata(const void* value, size_t size);
  std::string* mutable_wavfiledata();
  std::string* release_wavfiledata();
  void set_allocated_wavfiledata(std::string* wavfiledata);
  private:
  const std::string& _internal_wavfiledata() const;
  void _internal_set_wavfiledata(const std::string& value);
  std::string* _internal_mutable_wavfiledata();
  public:

  // .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
  void clear_basetype();
  ::DigitalLifeNameSpace::BaseMessageType basetype() const;
  void set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  private:
  ::DigitalLifeNameSpace::BaseMessageType _internal_basetype() const;
  void _internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value);
  public:

  // int32 StateType = 2;
  void clear_statetype();
  ::PROTOBUF_NAMESPACE_ID::int32 statetype() const;
  void set_statetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_statetype() const;
  void _internal_set_statetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool bSuccess = 15;
  void clear_bsuccess();
  bool bsuccess() const;
  void set_bsuccess(bool value);
  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:DigitalLifeNameSpace.S_RetData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wavfiledata_;
  int basetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 statetype_;
  bool bsuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_DigitalLife_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_BaseAsk

// .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
inline void C_BaseAsk::clear_basetype() {
  basetype_ = 0;
}
inline ::DigitalLifeNameSpace::BaseMessageType C_BaseAsk::_internal_basetype() const {
  return static_cast< ::DigitalLifeNameSpace::BaseMessageType >(basetype_);
}
inline ::DigitalLifeNameSpace::BaseMessageType C_BaseAsk::basetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.C_BaseAsk.BaseType)
  return _internal_basetype();
}
inline void C_BaseAsk::_internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  
  basetype_ = value;
}
inline void C_BaseAsk::set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  _internal_set_basetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.C_BaseAsk.BaseType)
}

// bool bSuccess = 15;
inline void C_BaseAsk::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool C_BaseAsk::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool C_BaseAsk::bsuccess() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.C_BaseAsk.bSuccess)
  return _internal_bsuccess();
}
inline void C_BaseAsk::_internal_set_bsuccess(bool value) {
  
  bsuccess_ = value;
}
inline void C_BaseAsk::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.C_BaseAsk.bSuccess)
}

// -------------------------------------------------------------------

// S_SwitchMesh

// .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
inline void S_SwitchMesh::clear_basetype() {
  basetype_ = 0;
}
inline ::DigitalLifeNameSpace::BaseMessageType S_SwitchMesh::_internal_basetype() const {
  return static_cast< ::DigitalLifeNameSpace::BaseMessageType >(basetype_);
}
inline ::DigitalLifeNameSpace::BaseMessageType S_SwitchMesh::basetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_SwitchMesh.BaseType)
  return _internal_basetype();
}
inline void S_SwitchMesh::_internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  
  basetype_ = value;
}
inline void S_SwitchMesh::set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  _internal_set_basetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_SwitchMesh.BaseType)
}

// .DigitalLifeNameSpace.S_SwitchMesh.ClientMeshType MeshType = 2;
inline void S_SwitchMesh::clear_meshtype() {
  meshtype_ = 0;
}
inline ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType S_SwitchMesh::_internal_meshtype() const {
  return static_cast< ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType >(meshtype_);
}
inline ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType S_SwitchMesh::meshtype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_SwitchMesh.MeshType)
  return _internal_meshtype();
}
inline void S_SwitchMesh::_internal_set_meshtype(::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType value) {
  
  meshtype_ = value;
}
inline void S_SwitchMesh::set_meshtype(::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType value) {
  _internal_set_meshtype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_SwitchMesh.MeshType)
}

// bool bSuccess = 15;
inline void S_SwitchMesh::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool S_SwitchMesh::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool S_SwitchMesh::bsuccess() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_SwitchMesh.bSuccess)
  return _internal_bsuccess();
}
inline void S_SwitchMesh::_internal_set_bsuccess(bool value) {
  
  bsuccess_ = value;
}
inline void S_SwitchMesh::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_SwitchMesh.bSuccess)
}

// -------------------------------------------------------------------

// S_AllowedSay

// .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
inline void S_AllowedSay::clear_basetype() {
  basetype_ = 0;
}
inline ::DigitalLifeNameSpace::BaseMessageType S_AllowedSay::_internal_basetype() const {
  return static_cast< ::DigitalLifeNameSpace::BaseMessageType >(basetype_);
}
inline ::DigitalLifeNameSpace::BaseMessageType S_AllowedSay::basetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_AllowedSay.BaseType)
  return _internal_basetype();
}
inline void S_AllowedSay::_internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  
  basetype_ = value;
}
inline void S_AllowedSay::set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  _internal_set_basetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_AllowedSay.BaseType)
}

// bool bSuccess = 15;
inline void S_AllowedSay::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool S_AllowedSay::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool S_AllowedSay::bsuccess() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_AllowedSay.bSuccess)
  return _internal_bsuccess();
}
inline void S_AllowedSay::_internal_set_bsuccess(bool value) {
  
  bsuccess_ = value;
}
inline void S_AllowedSay::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_AllowedSay.bSuccess)
}

// -------------------------------------------------------------------

// C_SendData

// .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
inline void C_SendData::clear_basetype() {
  basetype_ = 0;
}
inline ::DigitalLifeNameSpace::BaseMessageType C_SendData::_internal_basetype() const {
  return static_cast< ::DigitalLifeNameSpace::BaseMessageType >(basetype_);
}
inline ::DigitalLifeNameSpace::BaseMessageType C_SendData::basetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.C_SendData.BaseType)
  return _internal_basetype();
}
inline void C_SendData::_internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  
  basetype_ = value;
}
inline void C_SendData::set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  _internal_set_basetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.C_SendData.BaseType)
}

// bytes WavFileData = 2;
inline void C_SendData::clear_wavfiledata() {
  wavfiledata_.ClearToEmpty();
}
inline const std::string& C_SendData::wavfiledata() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.C_SendData.WavFileData)
  return _internal_wavfiledata();
}
inline void C_SendData::set_wavfiledata(const std::string& value) {
  _internal_set_wavfiledata(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.C_SendData.WavFileData)
}
inline std::string* C_SendData::mutable_wavfiledata() {
  // @@protoc_insertion_point(field_mutable:DigitalLifeNameSpace.C_SendData.WavFileData)
  return _internal_mutable_wavfiledata();
}
inline const std::string& C_SendData::_internal_wavfiledata() const {
  return wavfiledata_.Get();
}
inline void C_SendData::_internal_set_wavfiledata(const std::string& value) {
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void C_SendData::set_wavfiledata(std::string&& value) {
  
  wavfiledata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DigitalLifeNameSpace.C_SendData.WavFileData)
}
inline void C_SendData::set_wavfiledata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DigitalLifeNameSpace.C_SendData.WavFileData)
}
inline void C_SendData::set_wavfiledata(const void* value,
    size_t size) {
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DigitalLifeNameSpace.C_SendData.WavFileData)
}
inline std::string* C_SendData::_internal_mutable_wavfiledata() {
  
  return wavfiledata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* C_SendData::release_wavfiledata() {
  // @@protoc_insertion_point(field_release:DigitalLifeNameSpace.C_SendData.WavFileData)
  return wavfiledata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void C_SendData::set_allocated_wavfiledata(std::string* wavfiledata) {
  if (wavfiledata != nullptr) {
    
  } else {
    
  }
  wavfiledata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wavfiledata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DigitalLifeNameSpace.C_SendData.WavFileData)
}

// bool bSuccess = 15;
inline void C_SendData::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool C_SendData::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool C_SendData::bsuccess() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.C_SendData.bSuccess)
  return _internal_bsuccess();
}
inline void C_SendData::_internal_set_bsuccess(bool value) {
  
  bsuccess_ = value;
}
inline void C_SendData::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.C_SendData.bSuccess)
}

// -------------------------------------------------------------------

// S_RetData

// .DigitalLifeNameSpace.BaseMessageType BaseType = 1;
inline void S_RetData::clear_basetype() {
  basetype_ = 0;
}
inline ::DigitalLifeNameSpace::BaseMessageType S_RetData::_internal_basetype() const {
  return static_cast< ::DigitalLifeNameSpace::BaseMessageType >(basetype_);
}
inline ::DigitalLifeNameSpace::BaseMessageType S_RetData::basetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_RetData.BaseType)
  return _internal_basetype();
}
inline void S_RetData::_internal_set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  
  basetype_ = value;
}
inline void S_RetData::set_basetype(::DigitalLifeNameSpace::BaseMessageType value) {
  _internal_set_basetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_RetData.BaseType)
}

// int32 StateType = 2;
inline void S_RetData::clear_statetype() {
  statetype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RetData::_internal_statetype() const {
  return statetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 S_RetData::statetype() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_RetData.StateType)
  return _internal_statetype();
}
inline void S_RetData::_internal_set_statetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  statetype_ = value;
}
inline void S_RetData::set_statetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_statetype(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_RetData.StateType)
}

// bytes WavFileData = 3;
inline void S_RetData::clear_wavfiledata() {
  wavfiledata_.ClearToEmpty();
}
inline const std::string& S_RetData::wavfiledata() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_RetData.WavFileData)
  return _internal_wavfiledata();
}
inline void S_RetData::set_wavfiledata(const std::string& value) {
  _internal_set_wavfiledata(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_RetData.WavFileData)
}
inline std::string* S_RetData::mutable_wavfiledata() {
  // @@protoc_insertion_point(field_mutable:DigitalLifeNameSpace.S_RetData.WavFileData)
  return _internal_mutable_wavfiledata();
}
inline const std::string& S_RetData::_internal_wavfiledata() const {
  return wavfiledata_.Get();
}
inline void S_RetData::_internal_set_wavfiledata(const std::string& value) {
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void S_RetData::set_wavfiledata(std::string&& value) {
  
  wavfiledata_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DigitalLifeNameSpace.S_RetData.WavFileData)
}
inline void S_RetData::set_wavfiledata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:DigitalLifeNameSpace.S_RetData.WavFileData)
}
inline void S_RetData::set_wavfiledata(const void* value,
    size_t size) {
  
  wavfiledata_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DigitalLifeNameSpace.S_RetData.WavFileData)
}
inline std::string* S_RetData::_internal_mutable_wavfiledata() {
  
  return wavfiledata_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* S_RetData::release_wavfiledata() {
  // @@protoc_insertion_point(field_release:DigitalLifeNameSpace.S_RetData.WavFileData)
  return wavfiledata_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void S_RetData::set_allocated_wavfiledata(std::string* wavfiledata) {
  if (wavfiledata != nullptr) {
    
  } else {
    
  }
  wavfiledata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wavfiledata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DigitalLifeNameSpace.S_RetData.WavFileData)
}

// bool bSuccess = 15;
inline void S_RetData::clear_bsuccess() {
  bsuccess_ = false;
}
inline bool S_RetData::_internal_bsuccess() const {
  return bsuccess_;
}
inline bool S_RetData::bsuccess() const {
  // @@protoc_insertion_point(field_get:DigitalLifeNameSpace.S_RetData.bSuccess)
  return _internal_bsuccess();
}
inline void S_RetData::_internal_set_bsuccess(bool value) {
  
  bsuccess_ = value;
}
inline void S_RetData::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:DigitalLifeNameSpace.S_RetData.bSuccess)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DigitalLifeNameSpace

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType>() {
  return ::DigitalLifeNameSpace::S_SwitchMesh_ClientMeshType_descriptor();
}
template <> struct is_proto_enum< ::DigitalLifeNameSpace::BaseMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DigitalLifeNameSpace::BaseMessageType>() {
  return ::DigitalLifeNameSpace::BaseMessageType_descriptor();
}
template <> struct is_proto_enum< ::DigitalLifeNameSpace::ClientMeshType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DigitalLifeNameSpace::ClientMeshType>() {
  return ::DigitalLifeNameSpace::ClientMeshType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DigitalLife_2eproto
